"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClipsRepository = void 0;
const repository_1 = require("../core/repository");
const class_transformer_1 = require("class-transformer");
const JSONbig = require("json-bigint");
class ClipsRepository extends repository_1.Repository {
    set state(body) {
        this.moreAvailable = body.paging_info.more_available;
        this.nextMaxId = body.paging_info.max_id;
    }
    async discover(module, seen) {
        const { body } = await this.client.request.send({
            url: '/api/v1/clips/discover/',
            method: "POST",
            form: {
                seen_reels: seen ? seen : [],
                max_id: this.nextMaxId ? this.nextMaxId : undefined,
                container_module: module,
                _uuid: this.client.state.uuid
            },
        });
        this.state = body;
        return body;
    }
    async seen(reels) {
        const { body } = await this.client.request.send({
            url: '/api/v1/clips/write_seen_state/',
            method: "POST",
            form: this.client.request.sign({
                impressions: JSONbig.stringify(reels),
                _uuid: this.client.state.uuid
            }),
        });
        this.state = body;
        return body;
    }
}
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", Boolean)
], ClipsRepository.prototype, "moreAvailable", void 0);
exports.ClipsRepository = ClipsRepository;
//# sourceMappingURL=clips.repository.js.map