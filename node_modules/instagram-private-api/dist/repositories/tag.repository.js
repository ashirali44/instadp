"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagRepository = void 0;
const repository_1 = require("../core/repository");
const class_transformer_1 = require("class-transformer");
const chance_1 = require("chance");
class TagRepository extends repository_1.Repository {
    set state(body) {
        this.moreAvailable = body.more_available;
        this.nextMaxId = body.next_max_id;
    }
    async search(q) {
        const { body } = await this.client.request.send({
            url: '/api/v1/tags/search/',
            qs: {
                timezone_offset: this.client.state.timezoneOffset,
                q,
                count: 30,
            },
        });
        return body;
    }
    async section(q, tab) {
        const { body } = await this.client.request.send({
            url: `/api/v1/tags/${encodeURI(q)}/sections/`,
            qs: {
                timezone_offset: this.client.state.timezoneOffset,
                tab: tab,
                count: 30,
            },
        });
        return body;
    }
    async sections(q, tab) {
        const { body } = await this.client.request.send({
            method: "POST",
            url: `/api/v1/tags/${encodeURI(q)}/sections/`,
            form: {
                tab,
                page: this.page ? this.page : "",
                max_id: this.nextMaxId ? this.nextMaxId : "",
                rank_token: this.ranktoken ? this.ranktoken : this.ranktoken = new chance_1.Chance().guid(),
                count: 30,
                include_persistent: true
            },
        });
        this.state = body;
        return body;
    }
}
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", String)
], TagRepository.prototype, "nextMaxId", void 0);
exports.TagRepository = TagRepository;
//# sourceMappingURL=tag.repository.js.map