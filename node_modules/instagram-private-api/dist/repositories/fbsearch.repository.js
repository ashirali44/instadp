"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FbsearchRepository = void 0;
const repository_1 = require("../core/repository");
const class_transformer_1 = require("class-transformer");
class FbsearchRepository extends repository_1.Repository {
    set state(body) {
        this.moreAvailable = body.has_more;
        this.page = body.page_token;
        this.nextMaxId = body.next_max_id;
        this.ranktoken = body.rank_token;
    }
    async suggestedSearches(type) {
        const { body } = await this.client.request.send({
            url: '/api/v1/fbsearch/suggested_searches/',
            qs: {
                type,
            },
        });
        return body;
    }
    async recentSearches() {
        const { body } = await this.client.request.send({
            url: '/api/v1/fbsearch/recent_searches/',
        });
        return body;
    }
    async topsearchFlat(query) {
        const { body } = await this.client.request.send({
            url: '/api/v1/fbsearch/topsearch_flat/',
            qs: {
                timezone_offset: this.client.state.timezoneOffset,
                count: 30,
                query,
                context: 'blended',
            },
        });
        return body;
    }
    async places(query) {
        const { body } = await this.client.request.send({
            url: '/api/v1/fbsearch/places/',
            qs: {
                timezone_offset: this.client.state.timezoneOffset,
                count: 30,
                query,
            },
        });
        return body;
    }
    async topSearch(query) {
        const { body } = await this.client.request.send({
            url: '/api/v1/fbsearch/top_serp/',
            qs: {
                timezone_offset: this.client.state.timezoneOffset,
                count: 30,
                query,
                search_surface: "top_serp",
                max_id: this.nextMaxId,
                rank_token: this.ranktoken
            },
        });
        if (body.list) {
            this.state = body;
            return body.list;
        }
        if (body.media_grid) {
            this.state = body.media_grid;
        }
        return body.media_grid.sections;
    }
}
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", Boolean)
], FbsearchRepository.prototype, "moreAvailable", void 0);
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", String)
], FbsearchRepository.prototype, "nextMaxId", void 0);
exports.FbsearchRepository = FbsearchRepository;
//# sourceMappingURL=fbsearch.repository.js.map